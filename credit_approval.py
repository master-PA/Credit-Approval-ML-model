# -*- coding: utf-8 -*-
"""Credit_Approval.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KL0aBfjVU2egHsK76Q2qxDQ4N3ae2xkK
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from collections import Counter
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.tree import DecisionTreeClassifier

data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/application_record.csv')
lable = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/credit_record.csv')
data

lable

data = data.merge(lable, on='ID', how='left')
data

data.describe()

data.info()

data.isna().sum()

data.duplicated().sum()

gender_income=data.groupby('CODE_GENDER')['AMT_INCOME_TOTAL'].mean()
gender_income

sns.barplot(x=gender_income.index, y=gender_income.values)
plt.title('Gender vs Income')
plt.xlabel('Gender')
plt.ylabel('Income')
plt.show()

scaler = MinMaxScaler()
data['AMT_INCOME_TOTAL'] = scaler.fit_transform(data[['AMT_INCOME_TOTAL']])
data

lable_count=data['STATUS'].value_counts()
lable_count

le = LabelEncoder()
for col in data.select_dtypes(include=['object']).columns:
    data[col] = le.fit_transform(data[col].astype(str))
    data

data.fillna(data.mean(), inplace=True)

data.isnull().sum()

data['AGE_YEARS'] = (-data['DAYS_BIRTH'] / 365).astype(int)
data['DAYS_EMPLOYED'] = (-data['DAYS_EMPLOYED'] / 365).astype(int)
data['MONTHS_BALANCE'] = (-data['MONTHS_BALANCE'] / 12).astype(int)
data.drop(columns=['DAYS_BIRTH'], inplace=True)
data

data['AGE_YEARS'].value_counts().sort_index()

ig = plt.figure(figsize=(20, 20))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm')

data['STATUS'].value_counts()

data['Target'] = data['STATUS'].replace({'C': 0, 'X': 0}).astype(str)
data['Target'] = data['Target'].astype(int)
data['Target'] = (data['Target'] >= 3).astype(int)

data['Target'].value_counts().plot(kind='bar')

target_counts = Counter(data['Target'])
print("Target value counts:", target_counts)

df_target0 = data[data['Target'] == 0]
df_target1 = data[data['Target'] == 1]

df_tsrget1 = df_target1.sample(n=len(df_target0), random_state=42)

df_tsrget1.shape

df = pd.concat([df_target0, df_tsrget1], axis=0)
df['Target'].value_counts().plot(kind='bar')

X = df.drop(columns=['Target', 'STATUS'])
y = df['Target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)
X_train.shape, X_test.shape, y_train.shape, y_test.shape

model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

model.score(X_test, y_test)

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
rf_model.score(X_test, y_test)

y_pred = rf_model.predict(X_test)
print(classification_report(y_test, y_pred))
confusion_matrix =confusion_matrix(y_test, y_pred)

cm = confusion_matrix


sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, y_train)

dt_model.score(X_test, y_test)
from sklearn.metrics import classification_report, confusion_matrix
y_pred = dt_model.predict(X_test)
print(classification_report(y_test, y_pred))
confusion_matrix =confusion_matrix(y_test, y_pred)

import pickle
# Save the model to a file
with open('rf2_model.pkl', 'wb') as file:
    pickle.dump(rf_model, file)